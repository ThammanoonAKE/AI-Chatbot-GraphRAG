"""
AI response generation using Google Gemini
"""

import re
import logging
from typing import List, Dict, Optional
import google.generativeai as genai

from src.config import config
from src.models.enums import SearchType

logger = logging.getLogger(__name__)

class ResponseGenerator:
    """Generates AI responses using Gemini"""
    
    def __init__(self):
        self.model = None
        self._initialize_gemini()
    
    def _initialize_gemini(self):
        """Initialize Gemini AI model"""
        try:
            genai.configure(api_key=config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
            logger.info("‚úÖ Gemini AI initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Gemini: {e}")
            raise
    
    def is_legal_query(self, query: str) -> bool:
        """Check if query is legal-related"""
        legal_keywords = [
            "‡∏Ñ‡∏î‡∏µ", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ", "‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤", "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤", "‡∏≠‡∏≤‡∏ç‡∏≤", "‡πÅ‡∏û‡πà‡∏á", "‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô", "‡∏†‡∏≤‡∏©‡∏µ", 
            "‡∏à‡∏≥‡πÄ‡∏•‡∏¢", "‡πÇ‡∏à‡∏ó‡∏Å‡πå", "‡∏é‡∏µ‡∏Å‡∏≤", "‡∏ü‡πâ‡∏≠‡∏á", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "‡∏®‡∏≤‡∏•", "‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤", "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥",
            "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢", "‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö", "‡∏Å‡∏é‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á", "‡∏Ñ‡∏î‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°", "‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢", "‡∏Ñ‡∏≥‡∏ü‡πâ‡∏≠‡∏á",
            "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á", "‡∏≠‡∏∏‡∏ó‡∏ò‡∏£‡∏ì‡πå", "‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏Ñ‡∏î‡∏µ", "‡∏•‡πâ‡∏°‡∏•‡∏∞‡∏•‡∏≤‡∏¢", "‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á", "‡∏°‡∏£‡∏î‡∏Å", "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô",
            "‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢", "‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢", "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô", "‡∏à‡∏≥‡∏ô‡∏≥",
            "‡∏à‡∏≥‡∏ô‡∏≠‡∏á", "‡πÄ‡∏ä‡πà‡∏≤", "‡∏Ç‡∏≤‡∏¢", "‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô", "‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏ö‡∏±‡∏ï‡∏£",
            "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤", "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏ö‡∏∏‡∏ï‡∏£", "‡∏™‡∏°‡∏£‡∏™", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á", "‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
            "‡∏ó‡∏´‡∏≤‡∏£", "‡∏ï‡∏≥‡∏£‡∏ß‡∏à", "‡∏£‡∏±‡∏ê", "‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏•‡∏π‡∏Å‡∏à‡πâ‡∏≤‡∏á", "‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á", "‡∏™‡∏´‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
        ]
        
        # Check for case numbers and judge mentions
        case_number_pattern = r"\d{1,6}/\d{2,4}"
        has_case_number = re.search(case_number_pattern, query)
        
        # Also check for simple number patterns that could be case numbers
        simple_number_pattern = r"^\d+/\d+$"
        has_simple_case_number = re.search(simple_number_pattern, query.strip())
        
        judge_pattern = r"‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤\s*[\w\s]+"
        has_judge_mention = re.search(judge_pattern, query)
        
        has_legal_keywords = any(keyword in query for keyword in legal_keywords)
        
        return has_legal_keywords or has_case_number or has_judge_mention or has_simple_case_number
    
    def generate_non_legal_response(self) -> str:
        """Generate response for non-legal queries"""
        return """üö´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
üìã ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 1234/2567)
üë®‚Äç‚öñÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤
üìÇ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏î‡∏µ (‡∏≠‡∏≤‡∏ç‡∏≤, ‡πÅ‡∏û‡πà‡∏á, ‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô, ‡∏†‡∏≤‡∏©‡∏µ)
üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
üìñ ‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
    
    def generate_no_results_response(self) -> str:
        """Generate response when no results found"""
        return """‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á

üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:
‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 1234/2567)
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏î‡∏µ (‡∏≠‡∏≤‡∏ç‡∏≤, ‡πÅ‡∏û‡πà‡∏á, ‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô, ‡∏†‡∏≤‡∏©‡∏µ)
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢"""
    
    def generate_response(self, query: str, contexts: List[Dict], search_method: str) -> str:
        """Generate AI response from contexts"""
        if not contexts:
            return self.generate_no_results_response()
        
        # Build context for AI response
        context_data = []
        seen_cases = set()
        
        for ctx in contexts:
            decision_id = ctx.get('decision_id', '')
            
            # Skip duplicate cases, but collect all chunks first
            if decision_id in seen_cases:
                continue
            seen_cases.add(decision_id)
            
            judges_text = ", ".join(ctx['judges']) if ctx['judges'] else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            
            # Use full summary if available, otherwise combine chunks
            full_case_text = ctx.get('full_summary', '')
            if not full_case_text:
                # Fallback: collect all chunks for this case to reconstruct full text
                full_text_parts = []
                for context_item in contexts:
                    if context_item.get('decision_id') == decision_id:
                        full_text_parts.append(context_item.get('text', ''))
                full_case_text = " ".join(full_text_parts)
            
            # Include GraphRAG context if available
            graph_info = ""
            if 'graph_context' in ctx:
                graph_ctx = ctx['graph_context']
                if graph_ctx.get('related_concepts'):
                    concepts = [c['entity'] for c in graph_ctx['related_concepts'][:3]]
                    graph_info = f" (‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: {', '.join(concepts)})"
            
            # Include litigants info
            litigants_info = ""
            litigants = ctx.get('litigants', {})
            if litigants:
                plaintiff = litigants.get('‡πÇ‡∏à‡∏ó‡∏Å‡πå', '')
                defendant = litigants.get('‡∏à‡∏≥‡πÄ‡∏•‡∏¢', '')
                if plaintiff:
                    litigants_info += f"\n‡πÇ‡∏à‡∏ó‡∏Å‡πå: {plaintiff}"
                if defendant:
                    litigants_info += f"\n‡∏à‡∏≥‡πÄ‡∏•‡∏¢: {defendant}"
            
            context_info = f"‡∏Ñ‡∏î‡∏µ {ctx['decision_id']} (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {ctx['case_type']}) ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤: {judges_text}{graph_info}{litigants_info}"
            context_data.append(f"{context_info}\n{full_case_text}")
        
        combined_context = "\n---\n".join(context_data)
        
        # Enhanced prompt with GraphRAG context
        prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö GraphRAG ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏î‡∏µ

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ {search_method}):
{combined_context}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {query}

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡πÇ‡∏î‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°**

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

üèõÔ∏è ‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏•‡∏é‡∏µ‡∏Å‡∏≤‡∏ó‡∏µ‡πà [‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ] ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö [‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å] ‡πÉ‡∏ô [‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå] ‡πÇ‡∏î‡∏¢ [‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç]

## üìã **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ**
- **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ**: [‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ]
- **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó**: [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏î‡∏µ] 
- **‡πÇ‡∏à‡∏ó‡∏Å‡πå**: [‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å litigants.‡πÇ‡∏à‡∏ó‡∏Å‡πå ‡∏´‡∏£‡∏∑‡∏≠ litigants.plaintiff]
- **‡∏à‡∏≥‡πÄ‡∏•‡∏¢**: [‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å litigants.‡∏à‡∏≥‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠ litigants.defendant]
- **‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤**: [‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤]

## üìñ **‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏â‡∏ö‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°**

### üè† **‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á**
[‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏ ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô]

### ‚öñÔ∏è **‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**
[‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô]

### üèõÔ∏è **‡∏ß‡∏¥‡∏ß‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤**
#### **‡∏®‡∏≤‡∏•‡∏ä‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô**
[‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏®‡∏≤‡∏•‡∏ä‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô]

#### **‡∏®‡∏≤‡∏•‡∏≠‡∏∏‡∏ó‡∏ò‡∏£‡∏ì‡πå**
[‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏®‡∏≤‡∏•‡∏≠‡∏∏‡∏ó‡∏ò‡∏£‡∏ì‡πå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ]

#### **‡∏®‡∏≤‡∏•‡∏é‡∏µ‡∏Å‡∏≤ (‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)**
[‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏®‡∏≤‡∏•‡∏é‡∏µ‡∏Å‡∏≤]

### üìú **‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á**
[‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°]

### ‚öñÔ∏è **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô**
[‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÇ‡∏ó‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏®‡∏≤‡∏•]

### üéØ **‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**
[‡∏™‡∏Å‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤]

üîó **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á**: [‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á]

**‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
- ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
- ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏≠‡∏¢‡πà‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
"""
        
        try:
            response = self.model.generate_content(prompt)
            bot_reply = response.text.strip()
            
            # Add search statistics
            unique_cases = len(set(ctx['decision_id'] for ctx in contexts))
            case_types = list(set(ctx['case_type'] for ctx in contexts))
            unique_judges = len(set(judge for ctx in contexts for judge in ctx['judges']))
            
            stats = f"\n\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {search_method}"
            stats += f"\nüìÅ ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å {unique_cases} ‡∏Ñ‡∏î‡∏µ"
            if case_types:
                stats += f" | ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {', '.join(case_types)}"
            if unique_judges > 0:
                stats += f" | ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤: {unique_judges} ‡∏Ñ‡∏ô"
            
            # Show important cases
            important_cases = [ctx['decision_id'] for ctx in contexts[:3]]
            if important_cases:
                stats += f"\nüîç ‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(important_cases)}"
            
            # Add GraphRAG insights if available
            graphrag_cases = [ctx for ctx in contexts if ctx.get('source') == 'graph_discovery']
            if graphrag_cases:
                stats += f"\nüï∏Ô∏è ‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ú‡πà‡∏≤‡∏ô Graph: {len(graphrag_cases)} ‡∏Ñ‡∏î‡∏µ"
            
            bot_reply += stats
            return bot_reply
            
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {str(e)}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"